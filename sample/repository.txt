"init" ->The first process started by the Linux kernel

- Deals with services ONLY in startup and shut down

- Use run levels 0-6 to tell which services how a process will start as the "init" process starts
| (Pipe) ->Allows information from one command to be sent to another command
Address Space Layout Randomization (ASLR) ->Randomizes process memory address space

Purpose: To assist in the prevention of exploits that require the use of known address locations for particular process functions (such as the return function)
AppArmor ->Restricts capabilities of programs

Behavior based protections & dynamic protections

Works by learned behavior of applications and enforces the policy

Blends static analysis with machine learning
apt-get install package-name ->Installs the specific software with all associated dependencies
apt-get remove package-name ->Removes the specified software but does not remove dependencies
apt-get update ->Updates the system database of software updates that are available
apt-get upgrade ->Upgrades all the software with the available updates
Bastille ->Runs a series of scripts to change the configuration of Linux system to harden it to industry best practices
Center for Internet Security (CIS) Hardening Guides ->Provide steps to make system secure

 Hardening tools

 Scoring tools for rating your system's security
cgroups ->Manage control and governance of system resources (CPU & Memory)

 Limits, accounts for and isolates system resources for a group of processes

**- Ensures one or two processes do not utilize all resources
chroot() ->Called by an application

 Specifies to the OS kernel a directory in the filesystem where the application want to isolate itself

 Changes the root of the file system from the apps perspective
chroot() Challenges ->Have to discover & copy all app dependencies into chroot() directory--Apps & configuration files

Looks for preconfigured directories provided with OS (BIND, FTP)
Closing Unneeded Ports ->/etc/inetd.conf
/etc/xinetd.d
/etc/rc.conf


...must restart the daemon to take effect
Combining | & grep ->Enables on-the-fly scripting, making it easier to analyze large amounts of information

Use Case: A SOC analyst who needs to ID EoIs quickly & efficiently
Configuration Management Tools ->CFEngine
Puppet
Ansible
Saltstack
Chef
Container Core: "cgroups" & "namespaces" ->Core of the kernel that allow for the isolation of different apps

Provides the foundation of security
Containers ->Hold the application and associated files
**- Share the kernel**
Cron ->Scheduling Daemon

Ex Entry: 25 6 *** root /usr/bin/apt-get update

Works in total sync with the system clock
Disable Dynamic Loading After Boot ->Dynamic Loading = allowing for rootkits to inject into kernel with no reboot required

Disable them
Disabling Unneeded Kernel Modules ->Modproe adds/removes loadable kernal modules (LKMs) to the kerner

 Using modules is of then a way to gain kernel-level access, for root-kit exploits

 Blacklist or disable them from loading into the kernel at boot time

find /lib/modules/'unabe -r' -name *modulename*
Discretionary Access Control (DAC) ->Enables sysadmin and all user to manage the security of files they own or manage
Docker Container ->Creates a file system that contains applications an all components needed to run it (e.g. promotes automation)

 Applications can run the same in all environments
File Integrity Managers: OSSEC ->Runs on several different OSes

Integrates host-based intrusion detection

Log monitoring

Rootcheck

Process monitoring

Sends email alerts and alert logs

Integrates with SIEM
File Integrity Managers: Samhain ->Can be centralized, managed & controlled

Checks ports and executable files

A HIDS

Can monitor multiple OSes

Detects rogue executables

Detects rootkits

Port monitoring

Log file analysis and correlation
File Integrity Managers: Tripwire ->Writes alerts to logs

Offers intrusion detection

 Commercial & open source

Creates a secure database of file & directory attributes

 Can include SHA signatures for verification
Firewalld ->Dynamically managed, supports zones to define trust level for each interface

 Allows apps, services, and users to adapt the firewall settings

 Uses the D-Bus interface
Firewalld Features ->Masquerading, port forwarding, and source address handling

 Logging of denied packets

 Whitelisting of apps

 Integration with Puppet
Gradm ->Utility to Manage RBAC
grep ->Enables you to look for certain information
Grsecurity ->Set of patches for UNIX kernel that enhances security

MAC tool with RBAC support...aim to create Least Privilege system
inetd ->you can close ports by finding the line in the /etc/inetd.conf file for the service and comment it out by adding # to the beginning of the line
iptables -F ->Flush any existing rules
iptables -P INPUT DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP ->Sets default policy to DROP all packets
Jobs ->Processes that maintain system actives that need to occur continuously
Linux Advance Packaging Tool (APT): dpkg ->Debian Package Management tool

File extension = .deb
Linux Configuration Management Tools ->Increase over all security of UNIX environment
Linux Firewall Attributes ->NIDS & HIDS both receive packets

NIDS & HIDS both inspect packets

If denied by the ruleset, both firewalls drop packets

**Difference is if packets are accepted; HIDS will send packet up the stack, & NIDS will route it out the interface**
Linux Hardening: Scripts (Advantages) ->**- Scalable way to secure a system

**- Security can be defined one and scaled across the enterprise (consistent)

**- Can be used as a validation method in auditing

 Automation of the hardening process
Linux Hardening: Scripts (Disadvantages) ->Blindly applying security can be dangerous

 Security with not clear metrics makes validation difficult

 Requires competent tech to apply scripts

 Different systems require different security
Linux IP Tables ->A built-in host-based firewall
Linux LXC/Container (Kernel Features) ->AppArmor & SELlinux profiles

Seccomp policies

Chroots (using pivot_root)

Kernel capabilities

 CGroups
Linux LXC/Containers Capabilities ->User interface with application programming interfaces (API) used to make containers

 LXC creates containers with all components needed to run an application

 Has security for isolating the applications; uses kernel features for this

 Allows for isolation of the OS at the kernel so it can run on a single OS

 Key features: cgroups & namespaces

 Allow multiple OS virtualization on a signal host
Linux Package ->Contains binaries and dependencies that are required for software to run

 Allow for greater install efficiency (does not address maintenance)
Linux Package Management ->Solve Issue of package maintenance

Monitor updates and changes so that software upgrades can happen automatically
Linux Package Management: Binary Format ->Install precompiled applications to minimize dealings with source code
Linux Package Management: Download Validation ->Verify the download is valid from a trusted source
Linux Package Management: Installation of Dependencies ->Determine dependencies and makes sure they are installed
Linux Package Management: Standard Isolation for Installation ->Use standards to install files in common locations (such as libraries) to enable reuse of code
Linux Package Management: User Experience Components ->Add features to make it easier and enhance the user experience
Linux Package Management: Verification of Installation ->Verify the install was done correctly and makes sure it is stable to install
Linux Tool: ldd ->List dynamic dependencies

 Will show you the list of dependencies for an executable file
Linux: VServer ->Provides virtualization capability to Linux

VM escape minimized by using segmented routing, chroot, extended quotas
ls ->Shows you a list of all files on a system and helps identify modification or changes to files
ls -l ->Shows you the files on the system and the creation dates
Lynis ->Audits for compliance frameworks:

Available authentication

Expired SSL certs

Outdated Software

User accounts without PWs
man netstat ->Shows details about all options available & how to use them
man top ->list all options available to "top"
modinfo ->Command to use for seeing the dependent modules that will help in determining how specific you want/need to be while blacklisting modules
namespaces ->Focuses on obtaining the resources that an application needs and provides those resources to the application

 Enables isolation of a processes and limits what the process can see (e.g. nice in a compromise situation)

 Enables isolation of processes from the other processes
netstat ->Show network connections on a system;

**Including outbound connections and the services that are making the connections**

 provides visibility into network activity and look for rogue connections
netstat -a ->Shows all ports
netstat -at ->Shows all TCP ports
netstat -au ->Shows all UDP ports
netstat -l ->Shows all listening ports
netstat -s ->Shows statistics for each port
nft add rule ip filter output ip daddr 10.10.10.10 drop ->Command to drop packets with the destination address: 10.10.10.10
nftables ->Kernel subsystem

 Provides classification an filtering of network packets

 configured with "nft"
PaX ->Protects agains memory corruption

improves ASLR
propupd (with rkhunter) ->Creates a baseline of the system of all the default critical system files & paths rkhunter is set to monitor
ps --sort=pcpu ->Sort by CPU utilization
ps ->Shows active processes that are running on the system & create a baseline
ps -C apatche2 ->Shows process by name
ps -ef ->Shows all running processes
ps -ef | grep rtkit ->Use Case: looking for a potential rogue program

| & grep allow for focused filtering
ps -ef | grep syslog ->ps will show you which files are running as processes
Reducing Linux install/kernel boot footprint causes? ->Significant redux in surface area threat...fewer apps and packages installed to be vulnerable
rkhunter with rkhunter -c --enable all --disable none ->Completes a check of the system

Follow with "/var/log/rkhunter.conf" to review logs
Rootkit Detectors: Chkrootkit ->uses "strings" & "grep" commands to search system program for signatures and for comparing a list of the /proc filesystem with the output of the "ps" command to look for discrepancies

 Common False (+) on mailserver; blindshell infected on port 465
Rootkit Detectors: rkhunter ->Uses SHA-1 hash to compare important files to online databases of known good hashes

 Capable of whitelisting

 Advisable to schedule tasks
SELinux ->Hardens with Mandatory Access Control (MAC)

 enables admin to control all software interactions on the system
Source Routing ->Allows a packet's sender to partially or completely specify the route the packet takes through the network
SSH Multifactor Authentication ->Adds another layer of authentication to passwords

Examples:
Google Authenticator
FeeOTP
SSH Keys
SSH/TLS Key Management ->Solutions such as Keybox centrally manage all users' SSH keys and their sessions, which include integrated security.

Example Tools:
Google Authenticator
FreeOTP
Puppet
su ->Switch User

 Often used to elevate root
Sudo ->Alternative to su
 Provides granular control
 able to configure the system so that Admin A uses sudo, she can only create accounts, but no other root access is allowed

 Each user has his/her own account...no longer a shared single password like there is with "su"
Sysctl Hardening ->Configurable Setting Include:
 IPv4 & IPv6 settings
 Execshiled

Network attack preventions
 Logging attacks

 Address space layout randomization

Change using: /etc/sysctl.conf
Sysctl Hardening: Address space layout randomization ->Remove the "setarch" utility or not allow any user to have permissions to use "setarch"

Removing "setarch" makes defeating ASLR more difficult
Sysctl Hardening: IPv6 ->(3 Things)

 Disable router advertisements

 Enable IPv6 privacy extensions

 Adjust rate limiting
Sysctl Hardening: Source Routing ->Should disable source routing because it can allow two-way spoofed communication

Use: net.ipv4.conf.default.accept_sourse_route to 0
Systemd ->Responsible for staring and running processes in Linux

Replace "init"

Reduces surface attacks
Systemd Advantages ->Faster booting process

Configuration of device dependencies

SELinux integration

Able to restart crashed services
Systemd Disadvantages ->No more syslog; binary logging instead

No more cron; replaced by calendar timers

Not compatable with other init managers

Daemons are bundled and integrated
Systemd Functions (3) ->Provides integrated method for managing both systems and services

 Provides a software platform for managing, maintaining, and creating software

 Provides an interface between the applications and the kernel
Systemd Goal ->Provide a unified way to manage Linux services across various different distributions
tail ->Displays the last few lines of a file and is useful for log files (Default: last 10 lines)

Used for monitoring & baselining

**Useful for reviewing log files**

 Great for performing spot checks/looking for anomalies on systems
tail -c 500 /var/log/messages ->Using the "-c" option, you can control the number of bytes displayed
tail -f -s/var/log/messages ->Using the "-s" (sleep option) can control refresh rate

Default refresh rate is 1 second, but can be changed
tail /var/log/messages ->displays last ten lines of /var/log/messages
top ->**- Shows details about the process that are being run with associated CPU & Memory utilization**

 Can be used to baseline a system & spot anomalies

 Provides a dynamic, real-time view of a running Linux system
top -u <username> ->Shows all processes being run by that user
top (+ press "c") ->allows for the full path of the file to be displayed
top (+ press "Shift-p") ->Sorts by CPU utilization
top (+ press "z") ->allow for color coding of different processes
Upstart ->Supports parallel booting of services

 Processes "jobs"
VM ->Contain the entire OS

 Each application in each guest uses a different kernel
What OS runs most security appliances (firewalls, IDS, IPS)? ->Linux
What OS runs the systems that most critical data is stored, critical processes for accessing that data and map back to the server that data resides on? ->Linux
XFCE ->Reduces package size verses "gnome"...uses far less space and fewer resources